print(dim(metadata))
print(head(metadata))
colnames(metadata)
setwd("~/GitHub")
rm(list = ls())
require(tidyverse)
library(devil)
data <- scRNAseq::ReprocessedFluidigmData()
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(input_matrix))
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
NODG <- rowSums(counts > 0)
NODG
NODG <- rowSums(counts > 0)
NODG
plot(NODG)
NODG_CUT <- stats::quantile(NODG, .05)
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
plot_rank_genes
NODG <- rowSums(counts > 0)
NODG_CUT <- stats::quantile(NODG, .2)
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
plot_rank_genes
NODG_CUT
NODG <- rowSums(counts > 0)
NODG_CUT <- stats::quantile(NODG, .5)
NODG_CUT
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
length(NODS)
length(NODG)
NODG <- colSums(counts > 0)
setwd("~/GitHub")
rm(list = ls())
require(tidyverse)
library(devil)
data <- scRNAseq::ReprocessedFluidigmData()
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
NODG <- colSums(counts > 0)
NODG
NODG_CUT <- stats::quantile(NODG, .05)
NODG_CUT
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
plot_rank_genes
# Cell filtering
NODG <- colSums(counts > 0)
NODG_CUT <- stats::quantile(NODG, .05)
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
cell_filter <- NODG > NODG_CUT
counts <- counts[cell_filter, ]
counts <- counts[cell_filter, ]
metadata <- metadata[cell_filter, ]
dim(counts)
NODG_CUT
NODG
# Cell filtering
NODG <- colSums(counts > 0)
NODG_CUT <- stats::quantile(NODG, .05)
NODG_CUT
min(NODG)
setwd("~/GitHub")
rm(list = ls())
require(tidyverse)
library(devil)
data <- scRNAseq::ReprocessedFluidigmData()
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
# Cell filtering
NODG <- colSums(counts > 0)
NODG_CUT <- stats::quantile(NODG, .05)
NODG_CUT
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
plot_rank_genes
cell_filter <- NODG > NODG_CUT
cell_filter %>% sum()
counts <- counts[cell_filter, ]
metadata <- metadata[cell_filter, ]
dim(counts)
counts <- counts[, cell_filter]
counts
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
# Cell filtering
NODG <- colSums(counts > 0)
NODG_CUT <- stats::quantile(NODG, .05)
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
cell_filter <- NODG > NODG_CUT
counts <- counts[, cell_filter]
dim(counts)
metadata <- metadata[, cell_filter]
metadata <- metadata[cell_filter, ]
metadata
colSums(counts) == 0
rowSums(counts) == 0
# Gene filtering
absent_genes <- rowSums(counts) == 0
absent_genes
counts <- counts[!absent_genes,]
dim(counts)
mean_GE <- rowMeans(counts + 1 / nrow(counts))
gene_cv <- apply(counts, 2, function(x) sd(x)/mean(x+1/length(x)))
X1 = log2(mean_GE)
Y1 = log2(gene_cv +1 / nrow(counts))
Y1 = log2(gene_cv +1 / ncol(counts))
m = lm(Y1 ~ X1)
Yhat <- predict(m)
m = lm(Y1 ~ X1)
mean_GE <- rowMeans(counts + 1 / nrow(counts))
mean_GE
gene_cv <- apply(counts, 1, function(x) sd(x)/mean(x+1/length(x)))
X1 = log2(mean_GE)
Y1 = log2(gene_cv +1 / ncol(counts))
m = lm(Y1 ~ X1)
Yhat <- predict(m)
gene_to_keep <- (Yhat - 0.25) <= Y1
plot_mean_variance <- ggplot(data=tibble(x=X1, y=Y1, c=gene_to_keep), mapping = aes(x=x, y=y, col=c)) +
geom_point() +
geom_abline(slope = coef(m)[2], intercept = coef(m)[1], col="black", linetype="dashed") +
labs(x="log2(mean gene expression)",y="log2(coefficent of variation)", col="Keep") +
ggtitle("mean-variance trend") +
theme_bw()
plot_mean_variance
counts <- counts[gene_to_keep, ]
gene_to_keep
gene_to_keep %>% length()
Y1
(Yhat - 0.25) <= Y1
gene_to_keep <- Yhat <= Y1
plot_mean_variance <- ggplot(data=tibble(x=X1, y=Y1, c=gene_to_keep), mapping = aes(x=x, y=y, col=c)) +
geom_point() +
geom_abline(slope = coef(m)[2], intercept = coef(m)[1], col="black", linetype="dashed") +
labs(x="log2(mean gene expression)",y="log2(coefficent of variation)", col="Keep") +
ggtitle("mean-variance trend") +
theme_bw()
plot_mean_variance
sum(gene_to_keep)
length(Yhat)
gene_to_keep <- Yhat <= Y1
plot_mean_variance <- ggplot(data=tibble(x=X1, y=Y1, c=gene_to_keep), mapping = aes(x=x, y=y, col=c)) +
geom_point() +
geom_abline(slope = coef(m)[2], intercept = coef(m)[1], col="black", linetype="dashed") +
labs(x="log2(mean gene expression)",y="log2(coefficent of variation)", col="Keep") +
ggtitle("mean-variance trend") +
theme_bw()
plot_mean_variance
counts <- counts[gene_to_keep, ]
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
# Cell filtering
NODG <- colSums(counts > 0)
NODG_CUT <- stats::quantile(NODG, .05)
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
cell_filter <- NODG > NODG_CUT
counts <- counts[, cell_filter]
metadata <- metadata[cell_filter, ]
# Gene filtering
absent_genes <- rowSums(counts) == 0
counts <- counts[!absent_genes,]
dim(counts)
mean_GE <- rowMeans(counts + 1 / nrow(counts))
gene_cv <- apply(counts, 1, function(x) sd(x)/mean(x+1/length(x)))
X1 = log2(mean_GE)
Y1 = log2(gene_cv +1 / ncol(counts))
m = lm(Y1 ~ X1)
Yhat <- predict(m)
gene_to_keep <- Yhat <= Y1
plot_mean_variance <- ggplot(data=tibble(x=X1, y=Y1, c=gene_to_keep), mapping = aes(x=x, y=y, col=c)) +
geom_point() +
geom_abline(slope = coef(m)[2], intercept = coef(m)[1], col="black", linetype="dashed") +
labs(x="log2(mean gene expression)",y="log2(coefficent of variation)", col="Keep") +
ggtitle("mean-variance trend") +
theme_bw()
plot_mean_variance
counts <- counts[gene_to_keep, ]
counts
dim(counts)
# Design matrix
design_matrix <- model.matrix(~Biological_Condition, data = metadata)
head(design_matrix)
# Fit data
fit <- devil::fit_devil(input_matrix, design_matrix, overdispersion = T, size_factors = T, verbose = T, parallel = T)
# Fit data
fit <- devil::fit_devil(counts, design_matrix, overdispersion = T, size_factors = T, verbose = T, parallel = T)
gene_expr <- lapply(1:nrow(design_matrix), function(i) {
(fit$beta %*% design_matrix[i,])
}) %>% do.call('bind_cols', .)
pheatmap::pheatmap(gene_expr)
pheatmap::pheatmap(t(gene_expr))
gene_expr
dim(gene_expr)
pheatmap::pheatmap(t(gene_expr), cluster_rows = T, cluster_cols = F)
pheatmap::pheatmap(t(gene_expr), cluster_rows = T, cluster_cols = T)
pheatmap::pheatmap(t(gene_expr), cluster_rows = T, cluster_cols = T, annotation_row = metadata$Biological_Condition)
metadata$Biological_Condition
pheatmap::pheatmap(t(gene_expr), cluster_rows = T, cluster_cols = T, annotation_row = metadata$Biological_Condition)
metadata
rownames(gene_expr)
rownames(gene_expr) <- rownames(metadata)
rownames(gene_expr) <- rownames(metadata)
rownames(gene_expr)
gene_expr <- lapply(1:nrow(design_matrix), function(i) {
(fit$beta %*% design_matrix[i,])
}) %>% do.call('bind_cols', .) %>% as.matrix()
rownames(gene_expr) <- rownames(metadata)
rownames(gene_expr)
gene_expr
dim(gene_expr)
colnames(gene_expr) <- rownames(metadata)
pheatmap::pheatmap(t(gene_expr), cluster_rows = T, cluster_cols = T, annotation_row = metadata$Biological_Condition)
metadata$Biological_Condition
row_cond <- metadata$Biological_Condition
rownames(row_cond) <- colnames(gene_expr)
row_cond <- data.frame(Bio = metadata$Biological_Condition)
row_cond
rownames(row_cond) <- colnames(gene_expr)
pheatmap::pheatmap(t(gene_expr), cluster_rows = T, cluster_cols = T, annotation_row = row_cond)
pheatmap::pheatmap(t(gene_expr), cluster_rows = T, cluster_cols = T, annotation_row = row_cond, annotation_names_row = F)
pheatmap::pheatmap(t(gene_expr), cluster_rows = T, cluster_cols = T, annotation_row = row_cond, annotation_names_row = F, show_rownames = F)
setwd("~/GitHub")
rm(list = ls())
require(tidyverse)
library(devil)
data <- scRNAseq::ReprocessedFluidigmData()
data
Seurat::CreateSeuratObject(data)
Seurat::CreateSeuratObject(data)
d <- Seurat::CreateSeuratObject(data)
d
d <- Seurat::CreateSeuratObject(data)
class(data)
setwd("~/GitHub")
rm(list = ls())
require(tidyverse)
library(devil)
data <- scRNAseq::ReprocessedFluidigmData()
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
# Cell filtering
NODG <- colSums(counts > 0)
NODG_CUT <- stats::quantile(NODG, .05)
plot_rank_genes <- ggplot(data = dplyr::tibble(rank = rank(-NODG), NODG=NODG), mapping = aes(x=rank, y=NODG)) +
geom_point() +
geom_hline(yintercept = NODG_CUT) +
theme_bw()
cell_filter <- NODG > NODG_CUT
counts <- counts[, cell_filter]
metadata <- metadata[cell_filter, ]
# Gene filtering
absent_genes <- rowSums(counts) == 0
counts <- counts[!absent_genes,]
dim(counts)
mean_GE <- rowMeans(counts + 1 / nrow(counts))
gene_cv <- apply(counts, 1, function(x) sd(x)/mean(x+1/length(x)))
X1 = log2(mean_GE)
Y1 = log2(gene_cv +1 / ncol(counts))
m = lm(Y1 ~ X1)
Yhat <- predict(m)
gene_to_keep <- Yhat <= Y1
plot_mean_variance <- ggplot(data=tibble(x=X1, y=Y1, c=gene_to_keep), mapping = aes(x=x, y=y, col=c)) +
geom_point() +
geom_abline(slope = coef(m)[2], intercept = coef(m)[1], col="black", linetype="dashed") +
labs(x="log2(mean gene expression)",y="log2(coefficent of variation)", col="Keep") +
ggtitle("mean-variance trend") +
theme_bw()
plot_mean_variance
counts <- counts[gene_to_keep, ]
# Design matrix
design_matrix <- model.matrix(~Biological_Condition, data = metadata)
head(design_matrix)
# Fit data
fit <- devil::fit_devil(counts, design_matrix, overdispersion = T, size_factors = T, verbose = T, parallel = T)
# Test data
contrast <- c(0, 1, 0, -1)
test_res <- devil::test_de(fit, contrast)
test_res
test_res %>%
ggplot(mapping = aes(x = lfc, y = -log10(adj_pval))) +
geom_point()
test_res %>%
ggplot(mapping = aes(x = lfc, y = -log10(adj_pval), col = adj_pval <= .05)) +
geom_point()
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval")
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval", lab = "pippo")
test_res
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval", lab = "name")
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval", lab = name)
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval", lab = test_res$name)
setwd("~/GitHub")
rm(list = ls())
require(tidyverse)
library(devil)
## Input data
data <- scRNAseq::ReprocessedFluidigmData()
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
# Gene filtering
absent_genes <- rowSums(counts) == 0
counts <- counts[!absent_genes,]
dim(counts)
# Design matrix
design_matrix <- model.matrix(~Biological_Condition, data = metadata)
head(design_matrix)
# Fit data
fit <- devil::fit_devil(counts, design_matrix, overdispersion = T, size_factors = T, verbose = T, parallel = T)
data <- scRNAseq::ReprocessedFluidigmData()
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
counts <- data@assays@data[[1]]
metadata <- data@colData
print(dim(counts))
print(dim(metadata))
print(head(metadata))
colnames(metadata)
counts <- counts[rowSums(counts) > 0,]
dim(input_matrix)
counts <- counts[rowSums(counts) > 0,]
dim(counts)
design_matrix <- model.matrix(~Biological_Condition, data = metadata)
head(design_matrix)
design_matrix <- model.matrix(~Biological_Condition, data = metadata)
print(unique(metadata$Biological_Condition))
head(design_matrix)
fit <- devil::fit_devil(input_matrix, design_matrix, overdispersion = T, size_factors = T, verbose = T, parallel = T)
fit <- devil::fit_devil(counts, design_matrix, overdispersion = T, size_factors = T, verbose = T, parallel = T)
names(fit)
dim(fit$beta)
dim(fit$overdispersion)
dim(fit$sigma_beta)
fit$beta[1,]
colnames(design_matrix)
contrast <- c(0, 1, 0, -1)
test_res <- devil::test_de(fit, contrast)
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval", lab = test_res$name)
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval", lab = test_res$name, title = 'devil', subtitle = "GW21 vs. NPC")
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval", lab = test_res$name, title = 'devil volcano plot', subtitle = "GW21 vs. NPC")
EnhancedVolcano::EnhancedVolcano(test_res, x = 'lfc', y="adj_pval", lab = test_res$name, title = 'Devil volcano plot', subtitle = "GW21 vs. NPC")
colnames(test_res)
devtools::document()
setwd("~/GitHub/devil")
devtools::document()
devtools::load_all()
devtools::check()
pkgdown::build_site()
#setwd("~/Desktop/dottorato/rdevil_project/")
rm(list = ls())
library(tidyverse)
library(devil)
library(nebula)
#data = readRDS("../../../GitHub/de_analysis/nullpower/test_data/pb.TRUE.bca.n.10.ct.1.fc.0.5.csv")
data = readRDS("../de_analysis/nullpower/test_data/pb.FALSE.bca.n.10.ct.1.fc.0.5.csv")
metadata <- data$meta
input_matrix <- Y <- data$count %>% as.matrix()
design_matrix = model.matrix(~1+tx_cell, data = metadata)
pred <- model.matrix(~~1+tx_cell+id, data=metadata)
use_size_factors <- F
nebula:::center_m(design_matrix)
nebula:::center_m(design_matrix)$pred
input_matrix <- Y <- data$count %>% as.matrix()
design_matrix = model.matrix(~1+tx_cell, data = metadata)
design_matrix
use_size_factors <- F
nebula:::center_m(design_matrix)$pred
bench::mark(glmGamPoi::glm_gp(Y, design = design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, on_disk = F))
bench::mark(devil::fit_devil(Y, design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, parallel = F, use_memory = T), memory = F)
bench::mark(glmGamPoi::glm_gp(Y, design = design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, on_disk = F))
bench::mark(devil::fit_devil(Y, design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, parallel = F, use_memory = T), memory = F)
bench::mark(devil::fit_devil(Y, nebula:::center_m(design_matrix)$pred, size_factors = use_size_factors, overdispersion = T, verbose = T, parallel = F, use_memory = T), memory = F)
bench::mark(glmGamPoi::glm_gp(Y, design = design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, on_disk = F))
bench::mark(glmGamPoi::glm_gp(Y, design = nebula:::center_m(design_matrix)$pred, size_factors = use_size_factors, overdispersion = T, verbose = T, on_disk = F))
bench::mark(devil::fit_devil(Y, design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, parallel = T, use_memory = T), memory = F)
bench::mark(devil::fit_devil(Y, nebula:::center_m(design_matrix)$pred, size_factors = use_size_factors, overdispersion = T, verbose = T, parallel = T, use_memory = T), memory = F)
design_matrix
metadata
design_matrix$random = runif(nrow(design_matrix), -1, 1)
runif(nrow(design_matrix), -1, 1)
input_matrix <- Y <- data$count %>% as.matrix()
design_matrix = model.matrix(~1+tx_cell, data = metadata)
design_matrix
design_matrix$random = runif(nrow(design_matrix), -1, 1)
design_matrix
#setwd("~/Desktop/dottorato/rdevil_project/")
rm(list = ls())
library(tidyverse)
library(devil)
library(nebula)
#data = readRDS("../../../GitHub/de_analysis/nullpower/test_data/pb.TRUE.bca.n.10.ct.1.fc.0.5.csv")
data = readRDS("../de_analysis/nullpower/test_data/pb.FALSE.bca.n.10.ct.1.fc.0.5.csv")
metadata <- data$meta
metadata$random <- runif(nrow(design_matrix), -1, 1)
#setwd("~/Desktop/dottorato/rdevil_project/")
rm(list = ls())
library(tidyverse)
library(devil)
library(nebula)
#data = readRDS("../../../GitHub/de_analysis/nullpower/test_data/pb.TRUE.bca.n.10.ct.1.fc.0.5.csv")
data = readRDS("../de_analysis/nullpower/test_data/pb.FALSE.bca.n.10.ct.1.fc.0.5.csv")
metadata <- data$meta
metadata$random <- runif(nrow(metadata), -1, 1)
input_matrix <- Y <- data$count %>% as.matrix()
design_matrix = model.matrix(~1+tx_cell+random, data = metadata)
design_matrix
use_size_factors <- F
bench::mark(glmGamPoi::glm_gp(Y, design = design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, on_disk = F))
bench::mark(glmGamPoi::glm_gp(Y, design = nebula:::center_m(design_matrix)$pred, size_factors = use_size_factors, overdispersion = T, verbose = T, on_disk = F))
bench::mark(devil::fit_devil(Y, design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, parallel = F, use_memory = T), memory = F)
bench::mark(devil::fit_devil(Y, design_matrix, size_factors = use_size_factors, overdispersion = T, verbose = T, parallel = T, use_memory = T), memory = F)
bench::mark(devil::fit_devil(Y, nebula:::center_m(design_matrix)$pred, size_factors = use_size_factors, overdispersion = T, verbose = T, parallel = F, use_memory = T), memory = F)
setwd("~/Desktop")
require(tidyverse)
words <- read.delim("OPTED-Dictionary.csv", sep = ",")$Word
letters <- strsplit("OE", "") %>% unlist()
res <- lapply(words, function(w) {
ll <- strsplit(toupper(w), "") %>% unlist()
if (all(ll %in% letters) & letters[1] %in% ll) {
return(dplyr::tibble(word = w, n = length(ll), pangram = all(letters %in% ll), game="SpellingBee"))
}
if ((length(ll) == 5) & all(letters %in% ll)) {
return(dplyr::tibble(word = w, n = length(ll), pangram = all(letters %in% ll), game="Wordle"))
}
}) %>% do.call("bind_rows", .)
res
w <- res$word[«]
w <- res$word[1]
w
res %>% dplyr::filter(n == 5)
res %>% dplyr::filter(n == 5) %>% pull(word)
(res %>% dplyr::filter(n == 5) %>% pull(word))[1]
w <- (res %>% dplyr::filter(n == 5) %>% pull(word))[1]
w
strsplit(w)
strsplit(w, "")
strsplit(toupper(w), "") %>% unlist()
ll <- strsplit(toupper(w), "") %>% unlist()
ll[2] == "O"
ll %in% c("Q", "E", "R", "U", "O", "P", "G", "J", "Z", "X", "V")
all(ll %in% c("Q", "E", "R", "U", "O", "P", "G", "J", "Z", "X", "V"))
for (w in res$word) {
ll <- strsplit(toupper(w), "") %>% unlist()
if ((ll[2] == "O") & (ll[4] == "E") & (all(ll %in% c("Q", "E", "R", "U", "O", "P", "G", "J", "Z", "X", "V")))) {
print(w)
}
}
w <- (res %>% dplyr::filter(n == 5) %>% pull(word))[1]
for (w in res$word) {
ll <- strsplit(toupper(w), "") %>% unlist()
if ((ll[2] == "O") & (ll[4] == "E") & (all(ll %in% c("Q", "E", "R", "U", "O", "P", "G", "J", "Z", "X", "V")))) {
print(w)
}
}
res$word
for (w in res %>% dplyr::filter(n == 5) %>% pull(word)) {
ll <- strsplit(toupper(w), "") %>% unlist()
if ((ll[2] == "O") & (ll[4] == "E") & (all(ll %in% c("Q", "E", "R", "U", "O", "P", "G", "J", "Z", "X", "V")))) {
print(w)
}
}
