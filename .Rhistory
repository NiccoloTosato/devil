library(ggplot2)
set.seed(12345)
sim <- new(Simulation, "Border Growth")
# Set the "border" growth model
sim$duplicate_internal_cells <- FALSE
# Set the death activation level to avoid drift
sim$death_activation_level <- 50
# Add mutants
sim$add_mutant(name = "A", growth_rates = 0.1, death_rates = 0.01)
sim$place_cell("A", 500, 500)
sim$run_up_to_size("A", 4000)
sim$get_clock()
# Add "B" mutant
sim$add_mutant(name="B", growth_rates = 0.1, death_rates=.01)
sim$mutate_progeny(sim$choose_cell_in("A"), "B")
sim$run_up_to_size("B", 4000)
plot_tissue(sim, num_of_bins = 500)
# Sample cells ####
n_w <- n_h <- 20
ncells <- 0.8*n_w*n_h
bbox <- sim$search_sample(c("A" = ncells), n_w, n_h)
sim$sample_cells("S_A", bbox$lower_corner, bbox$upper_corner)
bbox <- sim$search_sample(c("B" = ncells), n_w, n_h)
sim$sample_cells("S_B", bbox$lower_corner, bbox$upper_corner)
plot_tissue(sim, num_of_bins = 500)
forest <- sim$get_samples_forest()
# Get genomics urls ####
reference_url <- paste0("https://ftp.ensembl.org/pub/grch37/current/",
"fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.",
"dna.chromosome.22.fa.gz")
SBS_url <- paste0("https://cancer.sanger.ac.uk/signatures/documents/2123/",
"COSMIC_v3.4_SBS_GRCh37.txt")
drivers_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"driver_mutations_hg19.csv")
passenger_CNAs_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"passenger_CNAs_hg19.csv")
germline_url <- paste0("https://www.dropbox.com/scl/fi/g9oloxkip18tr1r",
"m6wjve/germline_data_demo.tar.gz?rlkey=15jshul",
"d3bqgyfcs7fa0bzqeo&dl=1")
CLEAN_FOLDER <- TRUE
# Get genomics urls ####
reference_url <- paste0("https://ftp.ensembl.org/pub/grch37/current/",
"fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.",
"dna.chromosome.22.fa.gz")
SBS_url <- paste0("https://cancer.sanger.ac.uk/signatures/documents/2123/",
"COSMIC_v3.4_SBS_GRCh37.txt")
drivers_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"driver_mutations_hg19.csv")
passenger_CNAs_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"passenger_CNAs_hg19.csv")
germline_url <- paste0("https://www.dropbox.com/scl/fi/g9oloxkip18tr1r",
"m6wjve/germline_data_demo.tar.gz?rlkey=15jshul",
"d3bqgyfcs7fa0bzqeo&dl=1")
# build a mutation engine and place all the files in the directory "Test" ####
m_engine <- build_mutation_engine(directory = "Test",
reference_src = reference_url,
SBS_src = SBS_url,
drivers_src = drivers_url,
passenger_CNAs_src = passenger_CNAs_url,
germline_src = germline_url)
# build a mutation engine and place all the files in the directory "Test" ####
if (CLEAN_FOLDER & dir.exists("Test/")) {
unlink("Test/", recursive = TRUE)
}
# build a mutation engine and place all the files in the directory "Test" ####
if (CLEAN_FOLDER) {
unlink("Test/", recursive = TRUE)
}
m_engine <- build_mutation_engine(directory = "Test",
reference_src = reference_url,
SBS_src = SBS_url,
drivers_src = drivers_url,
passenger_CNAs_src = passenger_CNAs_url,
germline_src = germline_url)
# Define Mutants ####
# B, son of A, will have a copy number event
# We remove passenger CNA
m_engine$add_mutant(
mutant_name = "A",
passenger_rates = c(SNV = 7e-8, CNA = 0),
driver_SNVs = c(SNV("22", 10510210, "C"))
#driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 10303470,len = 1e7))
)
m_engine$add_mutant("B",
passenger_rates = c(SNV=7e-8, CNA=1e-9),
driver_SNVs = c(SNV("22", 10510210, "C")),
driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 20303470,len = 1e7))
)
m_engine$add_exposure(coefficients = c(SBS13 = 0.4, SBS1 = 0.6))
rm(list = ls())
library(rRACES)
library(dplyr)
library(ggplot2)
rm(list = ls())
set.seed(12345)
CLEAN_FOLDER <- TRUE
sim <- new(Simulation, "Border Growth")
# Set the "border" growth model
sim$duplicate_internal_cells <- FALSE
# Set the death activation level to avoid drift
sim$death_activation_level <- 50
# Add mutants
sim$add_mutant(name = "A", growth_rates = 0.1, death_rates = 0.01)
sim$place_cell("A", 500, 500)
sim$run_up_to_size("A", 4000)
sim$get_clock()
# Add "B" mutant
sim$add_mutant(name="B", growth_rates = 0.1, death_rates=.01)
sim$mutate_progeny(sim$choose_cell_in("A"), "B")
sim$run_up_to_size("B", 4000)
plot_tissue(sim, num_of_bins = 500)
# Sample cells ####
n_w <- n_h <- 20
ncells <- 0.8*n_w*n_h
bbox <- sim$search_sample(c("A" = ncells), n_w, n_h)
sim$sample_cells("S_A", bbox$lower_corner, bbox$upper_corner)
bbox <- sim$search_sample(c("B" = ncells), n_w, n_h)
sim$sample_cells("S_B", bbox$lower_corner, bbox$upper_corner)
plot_tissue(sim, num_of_bins = 500)
forest <- sim$get_samples_forest()
# Get genomics urls ####
reference_url <- paste0("https://ftp.ensembl.org/pub/grch37/current/",
"fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.",
"dna.chromosome.22.fa.gz")
SBS_url <- paste0("https://cancer.sanger.ac.uk/signatures/documents/2123/",
"COSMIC_v3.4_SBS_GRCh37.txt")
drivers_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"driver_mutations_hg19.csv")
passenger_CNAs_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"passenger_CNAs_hg19.csv")
germline_url <- paste0("https://www.dropbox.com/scl/fi/g9oloxkip18tr1r",
"m6wjve/germline_data_demo.tar.gz?rlkey=15jshul",
"d3bqgyfcs7fa0bzqeo&dl=1")
# build a mutation engine and place all the files in the directory "Test" ####
if (CLEAN_FOLDER) {
unlink("Test/", recursive = TRUE)
}
m_engine <- build_mutation_engine(directory = "Test",
reference_src = reference_url,
SBS_src = SBS_url,
drivers_src = drivers_url,
passenger_CNAs_src = passenger_CNAs_url,
germline_src = germline_url)
# Define Mutants ####
# B, son of A, will have a copy number event
# We remove passenger CNA
m_engine$add_mutant(
mutant_name = "A",
passenger_rates = c(SNV = 7e-8, CNA = 0),
driver_SNVs = c(SNV("22", 10510210, "C"))
#driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 10303470,len = 1e7))
)
m_engine$add_mutant("B",
passenger_rates = c(SNV=7e-8, CNA=1e-9),
driver_SNVs = c(SNV("22", 10510210, "C")),
driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 20303470,len = 1e7))
)
m_engine$add_exposure(coefficients = c(SBS13 = 0.4, SBS1 = 0.6))
# Load sample forest and place 0 pre-neolpastic mutations
phylo_forest <- m_engine$place_mutations(forest, 0)
phylo_forest$get_sampled_cell_CNAs()[1,]
# Get forest nodes
forest_nodes <- forest$get_nodes()
forest_nodes$sample %>% table()
forest_nodes %>% nrow()
phylo_forest$get_sampled_cell_SNVs() %>% head()
phylo_forest$get_sampled_cell_SNVs() %>% pull(class) %>% table()
# Simulate sequencing ####
seq_results <- simulate_seq(phylo_forest, coverage = 80)
seq_to_long <- function(seq_results) {
# get names of samples
sample_names <- strsplit(colnames(seq_results)[grepl("VAF", colnames(seq_results), fixed = TRUE)], ".VAF") %>% unlist()
sn <- sample_names[1]
seq_df <- lapply(sample_names, function(sn) {
cc <- c("chromosome", "chr_pos", "ref", "alt", colnames(seq_results)[grepl(sn, colnames(seq_results), fixed = T)])
seq_results[, cc] %>%
`colnames<-`(c("chromosome", "chr_pos", "ref", "alt", "occurences", "coverage", "VAF")) %>%
dplyr::mutate(sample_name = sn)
}) %>% do.call("bind_rows", .)
seq_df %>%
dplyr::rename(chr = chromosome, from = chr_pos, DP = coverage, NV = occurences, ALT = alt) %>%
dplyr::mutate(to = from) %>%
dplyr::select(chr, from, to, ALT, NV, DP, VAF, sample_name)
}
extract_cna <- function(phylo_forest) {
phylo_forest$get_sampled_cell_CNAs() %>%
dplyr::distinct(type, chromosome, begin, end, allele, src.allele) %>%
dplyr::rename(chr=chromosome, from=begin, to=end) %>%
dplyr::mutate(Major = ifelse(type=="A", allele, 1), minor=ifelse(type=="A", 1, allele)) %>%
dplyr::select(chr, from, to, Major, minor, type)
}
seq_df <- seq_to_long(seq_results %>% dplyr::filter(classes != "germinal"))
cnas <- extract_cna(phylo_forest)
purity <- 1
vaf_plot <- seq_df %>%
ggplot(mapping = aes(x=from, y=VAF)) +
geom_point() +
facet_wrap(~ sample_name) +
ylim(0,1)
vaf_plot
cnas <- extract_cna(phylo_forest)
cn <- cnas[1,]
vaf_plot_cna <- seq_df %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name)
vaf_plot_cna
vaf_plot_cna <- seq_df %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name) +
theme_bw()
vaf_plot_cna <- seq_df %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name) +
theme_bw() +
geom_vline(xintercept = c(.33, .66), color="indianred")
vaf_plot_cna
vaf_plot_cna <- seq_df %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name) +
theme_bw() +
geom_vline(xintercept = c(.33, .66), color="indianred") +
ggtitle("You expected two peaks in the B population")
vaf_plot_cna
seq_df %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name) +
theme_bw() +
geom_vline(xintercept = c(.33, .66), color="indianred") +
ggtitle("Two peaks are expected in the B population")
if (CLEAN_FOLDER) {
t <- "New Test folder from scratch"
} else {
t <- "Test folder not been rebuilt"
}
seq_df %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name) +
theme_bw() +
geom_vline(xintercept = c(.33, .66), color="indianred") +
ggtitle(t, "Two peaks are expected in the B population")
library(rRACES)
library(dplyr)
library(ggplot2)
rm(list = ls())
set.seed(12345)
CLEAN_FOLDER <- TRUE
sim <- new(Simulation, "Border Growth")
# Set the "border" growth model
sim$duplicate_internal_cells <- FALSE
# Set the death activation level to avoid drift
sim$death_activation_level <- 50
# Add mutants
sim$add_mutant(name = "A", growth_rates = 0.1, death_rates = 0.01)
sim$place_cell("A", 500, 500)
sim$run_up_to_size("A", 4000)
sim$get_clock()
# Add "B" mutant
sim$add_mutant(name="B", growth_rates = 0.1, death_rates=.01)
sim$mutate_progeny(sim$choose_cell_in("A"), "B")
sim$run_up_to_size("B", 4000)
plot_tissue(sim, num_of_bins = 500)
# Sample cells ####
n_w <- n_h <- 20
ncells <- 0.8*n_w*n_h
bbox <- sim$search_sample(c("A" = ncells), n_w, n_h)
sim$sample_cells("S_A", bbox$lower_corner, bbox$upper_corner)
bbox <- sim$search_sample(c("B" = ncells), n_w, n_h)
sim$sample_cells("S_B", bbox$lower_corner, bbox$upper_corner)
plot_tissue(sim, num_of_bins = 500)
forest <- sim$get_samples_forest()
# Get genomics urls ####
reference_url <- paste0("https://ftp.ensembl.org/pub/grch37/current/",
"fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.",
"dna.chromosome.22.fa.gz")
SBS_url <- paste0("https://cancer.sanger.ac.uk/signatures/documents/2123/",
"COSMIC_v3.4_SBS_GRCh37.txt")
drivers_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"driver_mutations_hg19.csv")
passenger_CNAs_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"passenger_CNAs_hg19.csv")
germline_url <- paste0("https://www.dropbox.com/scl/fi/g9oloxkip18tr1r",
"m6wjve/germline_data_demo.tar.gz?rlkey=15jshul",
"d3bqgyfcs7fa0bzqeo&dl=1")
# build a mutation engine and place all the files in the directory "Test" ####
if (CLEAN_FOLDER) {
unlink("Test/", recursive = TRUE)
}
m_engine <- build_mutation_engine(directory = "Test",
reference_src = reference_url,
SBS_src = SBS_url,
drivers_src = drivers_url,
passenger_CNAs_src = passenger_CNAs_url,
germline_src = germline_url)
# Define Mutants ####
# B, son of A, will have a copy number event
# We remove passenger CNA
m_engine$add_mutant(
mutant_name = "A",
passenger_rates = c(SNV = 1e-7, CNA = 0),
driver_SNVs = c(SNV("22", 10510210, "C"))
#driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 10303470,len = 1e7))
)
m_engine$add_mutant("B",
passenger_rates = c(SNV=1e-7, CNA=1e-9),
driver_SNVs = c(SNV("22", 10510210, "C")),
driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 20303470,len = 1e7))
)
m_engine$add_exposure(coefficients = c(SBS13 = 0.4, SBS1 = 0.6))
# Simulate sequencing ####
seq_results <- simulate_seq(phylo_forest, coverage = 80)
phylo_forest <- m_engine$place_mutations(samples_forest, 0)
phylo_forest <- m_engine$place_mutations(forest, 0)
# Simulate sequencing ####
seq_results <- simulate_seq(phylo_forest, coverage = 80)
seq_to_long <- function(seq_results) {
# get names of samples
sample_names <- strsplit(colnames(seq_results)[grepl("VAF", colnames(seq_results), fixed = TRUE)], ".VAF") %>% unlist()
sn <- sample_names[1]
seq_df <- lapply(sample_names, function(sn) {
cc <- c("chromosome", "chr_pos", "ref", "alt", colnames(seq_results)[grepl(sn, colnames(seq_results), fixed = T)])
seq_results[, cc] %>%
`colnames<-`(c("chromosome", "chr_pos", "ref", "alt", "occurences", "coverage", "VAF")) %>%
dplyr::mutate(sample_name = sn)
}) %>% do.call("bind_rows", .)
seq_df %>%
dplyr::rename(chr = chromosome, from = chr_pos, DP = coverage, NV = occurences, ALT = alt) %>%
dplyr::mutate(to = from) %>%
dplyr::select(chr, from, to, ALT, NV, DP, VAF, sample_name)
}
extract_cna <- function(phylo_forest) {
phylo_forest$get_sampled_cell_CNAs() %>%
dplyr::distinct(type, chromosome, begin, end, allele, src.allele) %>%
dplyr::rename(chr=chromosome, from=begin, to=end) %>%
dplyr::mutate(Major = ifelse(type=="A", allele, 1), minor=ifelse(type=="A", 1, allele)) %>%
dplyr::select(chr, from, to, Major, minor, type)
}
seq_df <- seq_to_long(seq_results %>% dplyr::filter(classes != "germinal"))
cnas <- extract_cna(phylo_forest)
cn <- cnas[1,]
if (CLEAN_FOLDER) {
t <- "New Test folder from scratch"
} else {
t <- "Test folder not been rebuilt"
}
seq_df %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name) +
theme_bw() +
geom_vline(xintercept = c(.33, .66), color="indianred") +
ggtitle(t, "Two peaks are expected in the B population")
seq_df %>%
dplyr::filter(sample_name == "S_B") %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name) +
theme_bw() +
geom_vline(xintercept = c(.33, .66), color="indianred") +
ggtitle(t, "Two peaks are expected in the B population")
library(rRACES)
library(dplyr)
library(ggplot2)
rm(list = ls())
set.seed(12345)
CLEAN_FOLDER <- FALSE
sim <- new(Simulation, "Border Growth")
# Set the "border" growth model
sim$duplicate_internal_cells <- FALSE
# Set the death activation level to avoid drift
sim$death_activation_level <- 50
# Add mutants
sim$add_mutant(name = "A", growth_rates = 0.1, death_rates = 0.01)
sim$place_cell("A", 500, 500)
sim$run_up_to_size("A", 4000)
sim$get_clock()
# Add "B" mutant
sim$add_mutant(name="B", growth_rates = 0.1, death_rates=.01)
sim$mutate_progeny(sim$choose_cell_in("A"), "B")
sim$run_up_to_size("B", 4000)
plot_tissue(sim, num_of_bins = 500)
# Sample cells ####
n_w <- n_h <- 20
ncells <- 0.8*n_w*n_h
bbox <- sim$search_sample(c("A" = ncells), n_w, n_h)
sim$sample_cells("S_A", bbox$lower_corner, bbox$upper_corner)
bbox <- sim$search_sample(c("B" = ncells), n_w, n_h)
sim$sample_cells("S_B", bbox$lower_corner, bbox$upper_corner)
plot_tissue(sim, num_of_bins = 500)
forest <- sim$get_samples_forest()
# Get genomics urls ####
reference_url <- paste0("https://ftp.ensembl.org/pub/grch37/current/",
"fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.",
"dna.chromosome.22.fa.gz")
SBS_url <- paste0("https://cancer.sanger.ac.uk/signatures/documents/2123/",
"COSMIC_v3.4_SBS_GRCh37.txt")
drivers_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"driver_mutations_hg19.csv")
passenger_CNAs_url <- paste0("https://raw.githubusercontent.com/",
"caravagnalab/rRACES/main/inst/extdata/",
"passenger_CNAs_hg19.csv")
germline_url <- paste0("https://www.dropbox.com/scl/fi/g9oloxkip18tr1r",
"m6wjve/germline_data_demo.tar.gz?rlkey=15jshul",
"d3bqgyfcs7fa0bzqeo&dl=1")
# build a mutation engine and place all the files in the directory "Test" ####
if (CLEAN_FOLDER) {
unlink("Test/", recursive = TRUE)
}
m_engine <- build_mutation_engine(directory = "Test",
reference_src = reference_url,
SBS_src = SBS_url,
drivers_src = drivers_url,
passenger_CNAs_src = passenger_CNAs_url,
germline_src = germline_url)
# Define Mutants ####
# B, son of A, will have a copy number event
# We remove passenger CNA
m_engine$add_mutant(
mutant_name = "A",
passenger_rates = c(SNV = 1e-7, CNA = 0),
driver_SNVs = c(SNV("22", 10510210, "C"))
#driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 10303470,len = 1e7))
)
m_engine$add_mutant("B",
passenger_rates = c(SNV=1e-7, CNA=1e-9),
driver_SNVs = c(SNV("22", 10510210, "C")),
driver_CNAs = c(CNA(type = "A", "22", pos_in_chr = 20303470,len = 1e7))
)
m_engine$add_exposure(coefficients = c(SBS13 = 0.4, SBS1 = 0.6))
phylo_forest <- m_engine$place_mutations(forest, 0)
# Simulate sequencing ####
seq_results <- simulate_seq(phylo_forest, coverage = 80)
seq_to_long <- function(seq_results) {
# get names of samples
sample_names <- strsplit(colnames(seq_results)[grepl("VAF", colnames(seq_results), fixed = TRUE)], ".VAF") %>% unlist()
sn <- sample_names[1]
seq_df <- lapply(sample_names, function(sn) {
cc <- c("chromosome", "chr_pos", "ref", "alt", colnames(seq_results)[grepl(sn, colnames(seq_results), fixed = T)])
seq_results[, cc] %>%
`colnames<-`(c("chromosome", "chr_pos", "ref", "alt", "occurences", "coverage", "VAF")) %>%
dplyr::mutate(sample_name = sn)
}) %>% do.call("bind_rows", .)
seq_df %>%
dplyr::rename(chr = chromosome, from = chr_pos, DP = coverage, NV = occurences, ALT = alt) %>%
dplyr::mutate(to = from) %>%
dplyr::select(chr, from, to, ALT, NV, DP, VAF, sample_name)
}
extract_cna <- function(phylo_forest) {
phylo_forest$get_sampled_cell_CNAs() %>%
dplyr::distinct(type, chromosome, begin, end, allele, src.allele) %>%
dplyr::rename(chr=chromosome, from=begin, to=end) %>%
dplyr::mutate(Major = ifelse(type=="A", allele, 1), minor=ifelse(type=="A", 1, allele)) %>%
dplyr::select(chr, from, to, Major, minor, type)
}
seq_df <- seq_to_long(seq_results %>% dplyr::filter(classes != "germinal"))
cnas <- extract_cna(phylo_forest)
cn <- cnas[1,]
if (CLEAN_FOLDER) {
t <- "New Test folder from scratch"
} else {
t <- "Test folder not been rebuilt"
}
seq_df %>%
dplyr::filter(sample_name == "S_B") %>%
dplyr::filter(from >= cn$from, to<=cn$to) %>%
dplyr::filter(VAF >= .1) %>%
ggplot(mapping = aes(x=VAF)) +
geom_histogram(binwidth = .01) +
xlim(c(0,1)) +
facet_wrap(~ sample_name) +
theme_bw() +
geom_vline(xintercept = c(.33, .66), color="indianred") +
ggtitle(t, "Two peaks are expected in the B population")
sessionInfo()
